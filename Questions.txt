1. Create another Series named heights_B from a 1-D numpy array of 5 elements derived from the normal distribution of mean 170.0 and standard deviation 25.0.
Note: Set random seed to 100 before creating heights_B series. Use numpy.

Create another Series named weights_B from a 1-D numpy array of 5 elements derived from the normal distribution of mean 75.0 and standard deviation 12.0.
Note: Set random seed to 100 again before creating weights_B series. Use numpy.

Label both Series elements with s1, s2, s3, s4 and s5.

Create a dataframe df_B containing the height and weight of students s1, s2, s3, s4 and s5 belonging to class B.

Label the columns as Student_height and Student_weight respectively.

Write the contents of df_B without the index to a CSV file named classB.csv. Note: Use the index argument of to_csv method.

Verify if the file classB.csv exists in the present directory using the command ls -1.

Display the contents of classB.csv using the command cat classB.csv.


**HEY**
Create a series named heights_A with values 176.2, 158.4, 167.6, 156.2, and 161.4. These values represent the heights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create another series named weights_A with values 85.1, 90.2, 76.8, 80.4, and 78.9. These values represent the weights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create a dataframe named df_A, which holds the height and weight of five students s1, s2, s3, s4 and s5.

Label the columns as Student_height and Student_weight, respectively.

Filter the rows from df_A, whose Student_height > 160.0 and Student_weight < 80.0, and capture them in another dataframe df_A_filter1.

Print the dataframe df_A_filter1.

--HAPPY--
Check if the elements of 'dates_to_be_searched' are present in DateTimeIndex, 'dates', created above.
Note: Use the isin method associated with DatetimeIndex objects.

Print the output.